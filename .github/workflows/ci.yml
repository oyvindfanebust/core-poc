name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io

jobs:
  # Fast validation for early feedback
  fast-validation:
    name: Fast Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation check
        run: |
          # Build packages in dependency order
          npm run build --workspace=@core-poc/shared
          npm run build --workspace=@core-poc/eslint-config
          npm run build --workspace=@core-poc/core-services
          npm run build --workspace=@core-poc/domain
          npm run build --workspace=@core-poc/batch-processor
          npm run build --workspace=@core-poc/core-api
          npm run build --workspace=@core-poc/customer-frontend

      - name: Code formatting check
        run: npm run format:check

      - name: Lint check
        run: npm run lint

      - name: Fast tests (unit + mocked integration)
        run: npm test
        env:
          NODE_ENV: test
          LOG_LEVEL: error

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fast-test-results
          path: |
            apps/*/coverage/
            apps/*/test-results.xml
          retention-days: 7

  # Full integration testing with real services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: fast-validation

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: banking_poc_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start TigerBeetle
        run: |
          # Download TigerBeetle binary
          wget -q https://github.com/tigerbeetle/tigerbeetle/releases/download/0.16.44/tigerbeetle-x86_64-linux.zip
          unzip -q tigerbeetle-x86_64-linux.zip
          chmod +x tigerbeetle

          # Create data directory and format database
          mkdir -p ./tigerbeetle-data
          ./tigerbeetle format --cluster=0 --replica=0 --replica-count=1 --development ./tigerbeetle-data/app.tigerbeetle

          # Start TigerBeetle in background
          nohup ./tigerbeetle start --addresses=127.0.0.1:6000 --development ./tigerbeetle-data/app.tigerbeetle > tigerbeetle.log 2>&1 &

          # Wait for TigerBeetle to be ready
          echo "Waiting for TigerBeetle to start..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:6000 >/dev/null 2>&1 || nc -z 127.0.0.1 6000; then
              echo "TigerBeetle is ready!"
              break
            fi
            echo "Attempt $i/30: TigerBeetle not ready yet..."
            sleep 2
          done

      - name: Setup RabbitMQ exchanges and queues
        run: |
          # Wait for RabbitMQ to be fully ready
          sleep 10

          # Install rabbitmqadmin
          wget -q http://localhost:15672/cli/rabbitmqadmin
          chmod +x rabbitmqadmin

          # Create exchanges and queues for tests
          ./rabbitmqadmin -H localhost -u guest -p guest declare exchange name=banking-events type=topic durable=true
          ./rabbitmqadmin -H localhost -u guest -p guest declare queue name=banking-queue durable=true
          ./rabbitmqadmin -H localhost -u guest -p guest declare queue name=banking-queue-test durable=true
          ./rabbitmqadmin -H localhost -u guest -p guest declare binding source=banking-events destination=banking-queue routing_key=#
          ./rabbitmqadmin -H localhost -u guest -p guest declare binding source=banking-events destination=banking-queue-test routing_key=#

      - name: Run integration tests
        run: |
          # Set test environment variables
          export NODE_ENV=test
          export LOG_LEVEL=error
          export DB_HOST=localhost
          export DB_PORT=5432
          export DB_NAME=banking_poc_test
          export DB_USER=postgres
          export DB_PASSWORD=postgres
          export TIGERBEETLE_CLUSTER_ID=0
          export TIGERBEETLE_ADDRESSES=6000
          export AMQP_URL=amqp://guest:guest@localhost:5672
          export CDC_EXCHANGE=banking-events
          export CDC_QUEUE=banking-queue-test
          export CDC_ROUTING_KEYS=#
          export CDC_AUTO_ACK=false
          export TEST_MODE=true

          # Run all tests including slow integration tests
          npm run test:all || echo "Warning: test:all script not found, running workspace tests"
          npm run test:core-api || true
          npm run test:batch-processor || true

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            apps/*/coverage/
            apps/*/test-results.xml
            tigerbeetle.log
          retention-days: 7

      - name: Collect service logs on failure
        if: failure()
        run: |
          echo "=== TigerBeetle Logs ==="
          cat tigerbeetle.log || echo "No TigerBeetle logs found"
          echo "=== Docker Logs ==="
          docker logs $(docker ps -aq) || echo "No docker containers running"

  # Security and quality checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: fast-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          # Check for high and critical vulnerabilities
          npm audit --audit-level=high

          # Generate audit report
          npm audit --json > security-audit.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit
          path: security-audit.json
          retention-days: 30

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [fast-validation, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Production build
        run: |
          # Build all workspaces for production in dependency order
          NODE_ENV=production npm run build --workspace=@core-poc/shared
          NODE_ENV=production npm run build --workspace=@core-poc/eslint-config
          NODE_ENV=production npm run build --workspace=@core-poc/core-services
          NODE_ENV=production npm run build --workspace=@core-poc/domain
          NODE_ENV=production npm run build --workspace=@core-poc/batch-processor
          NODE_ENV=production npm run build --workspace=@core-poc/core-api
          NODE_ENV=production npm run build --workspace=@core-poc/customer-frontend

          # Verify build artifacts exist
          ls -la apps/*/dist/

          # Check bundle sizes (banking systems should be optimized)
          du -sh apps/*/dist/ || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist/
            packages/*/dist/
          retention-days: 7

  # Summary job for branch protection rules
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [fast-validation, integration-tests, security-scan, build-verification]
    if: always()

    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.fast-validation.result }}" != "success" ]]; then
            echo "Fast validation failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          if [[ "${{ needs.build-verification.result }}" != "success" ]]; then
            echo "Build verification failed"
            exit 1
          fi
          echo "All CI jobs completed successfully!"
