name: Release Pipeline

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v1.2.3-beta, etc.

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write

jobs:
  # Pre-release validation (same as CI but for tagged releases)
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: banking_poc_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation check
        run: |
          # Build packages in dependency order
          npm run build --workspace=@core-poc/shared
          npm run build --workspace=@core-poc/eslint-config
          npm run build --workspace=@core-poc/core-services
          npm run build --workspace=@core-poc/domain
          npm run build --workspace=@core-poc/batch-processor
          npm run build --workspace=@core-poc/core-api
          npm run build --workspace=@core-poc/customer-frontend

      - name: Code formatting check
        run: npm run format:check

      - name: Lint check
        run: npm run lint

      - name: Setup TigerBeetle for tests
        run: |
          # Download TigerBeetle binary
          wget -q https://github.com/tigerbeetle/tigerbeetle/releases/download/0.16.44/tigerbeetle-x86_64-linux.zip
          unzip -q tigerbeetle-x86_64-linux.zip
          chmod +x tigerbeetle

          # Create data directory and format database
          mkdir -p ./tigerbeetle-data
          ./tigerbeetle format --cluster=0 --replica=0 --replica-count=1 --development ./tigerbeetle-data/app.tigerbeetle

          # Start TigerBeetle in background
          nohup ./tigerbeetle start --addresses=127.0.0.1:6000 --development ./tigerbeetle-data/app.tigerbeetle > tigerbeetle.log 2>&1 &

          # Wait for TigerBeetle to be ready using proper client check
          echo "Waiting for TigerBeetle to start..."
          node .github/scripts/wait-for-tigerbeetle.js

      - name: Setup RabbitMQ for tests
        run: |
          sleep 10
          wget -q http://localhost:15672/cli/rabbitmqadmin
          chmod +x rabbitmqadmin
          ./rabbitmqadmin -H localhost -u guest -p guest declare exchange name=banking-events type=topic durable=true
          ./rabbitmqadmin -H localhost -u guest -p guest declare queue name=banking-queue-test durable=true
          ./rabbitmqadmin -H localhost -u guest -p guest declare binding source=banking-events destination=banking-queue-test routing_key=#

      - name: Run comprehensive tests
        run: |
          export NODE_ENV=test
          export LOG_LEVEL=error
          export DB_HOST=localhost
          export DB_PORT=5432
          export DB_NAME=banking_poc_test
          export DB_USER=postgres
          export DB_PASSWORD=postgres
          export TIGERBEETLE_CLUSTER_ID=0
          export TIGERBEETLE_ADDRESSES=6000
          export AMQP_URL=amqp://guest:guest@localhost:5672
          export CDC_EXCHANGE=banking-events
          export CDC_QUEUE=banking-queue-test
          export CDC_ROUTING_KEYS=#
          export CDC_AUTO_ACK=false
          export TEST_MODE=true

          # Run all tests for release validation
          npm test
          npm run test:core-api || true
          npm run test:batch-processor || true

      - name: Security audit for release
        run: |
          # Ensure no critical vulnerabilities in release
          npm audit --audit-level=high

  # Build release artifacts
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: pre-release-validation
    timeout-minutes: 20

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production artifacts
        run: |
          echo "Building production release ${{ steps.version.outputs.version }}"

          # Build all workspaces for production in dependency order
          NODE_ENV=production npm run build --workspace=@core-poc/shared
          NODE_ENV=production npm run build --workspace=@core-poc/eslint-config
          NODE_ENV=production npm run build --workspace=@core-poc/core-services
          NODE_ENV=production npm run build --workspace=@core-poc/domain
          NODE_ENV=production npm run build --workspace=@core-poc/batch-processor
          NODE_ENV=production npm run build --workspace=@core-poc/core-api
          NODE_ENV=production npm run build --workspace=@core-poc/customer-frontend

          # Create release directory structure
          mkdir -p release-artifacts

          # Package core-api
          cd apps/core-api
          npm pack
          mv *.tgz ../../release-artifacts/core-api-${{ steps.version.outputs.version }}.tgz
          cd ../..

          # Package batch-processor
          cd apps/batch-processor
          npm pack
          mv *.tgz ../../release-artifacts/batch-processor-${{ steps.version.outputs.version }}.tgz
          cd ../..

          # Package customer-frontend
          cd apps/customer-frontend
          npm pack
          mv *.tgz ../../release-artifacts/customer-frontend-${{ steps.version.outputs.version }}.tgz
          cd ../..

          # Copy built assets
          cp -r apps/core-api/dist release-artifacts/core-api-dist
          cp -r apps/batch-processor/dist release-artifacts/batch-processor-dist
          cp -r apps/customer-frontend/.next release-artifacts/customer-frontend-dist

          # Create deployment manifest
          cat > release-artifacts/deployment-manifest.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "components": {
              "core-api": {
                "package": "core-api-${{ steps.version.outputs.version }}.tgz",
                "port": 7001,
                "health_check": "/health"
              },
              "batch-processor": {
                "package": "batch-processor-${{ steps.version.outputs.version }}.tgz",
                "port": 7003
              },
              "customer-frontend": {
                "package": "customer-frontend-${{ steps.version.outputs.version }}.tgz",
                "port": 7002,
                "health_check": "/_next/static"
              }
            },
            "dependencies": {
              "postgresql": "15",
              "tigerbeetle": "0.16.44",
              "rabbitmq": "3-management",
              "node": "${{ env.NODE_VERSION }}"
            }
          }
          EOF

      - name: Generate release notes
        run: |
          # Extract version and previous version for changelog
          CURRENT_VERSION=${{ steps.version.outputs.version }}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          cat > RELEASE_NOTES.md << EOF
          # Banking Ledger PoC Release v${CURRENT_VERSION}

          **Release Date:** $(date -u +%Y-%m-%d)
          **Version:** ${CURRENT_VERSION}

          ## 🏦 Banking System Components

          - **Core API** (Port 7001): Banking operations and account management
          - **Batch Processor** (Port 7003): Automated payment processing
          - **Customer Frontend** (Port 7002): Multi-language customer interface

          ## 📦 Deployment Requirements

          - Node.js ${{ env.NODE_VERSION }}+
          - PostgreSQL 15+
          - TigerBeetle 0.16.44
          - RabbitMQ 3 with management plugin

          ## 🔧 Quick Deployment

          \`\`\`bash
          # Start infrastructure
          docker-compose up -d

          # Install and run
          npm ci
          npm run build
          npm run dev:all
          \`\`\`

          ## 🌍 Multi-Language Support

          - English (en)
          - Norwegian (no) 
          - Serbian (sr)

          ## 🔒 Security Features

          - All financial data stored in TigerBeetle
          - PostgreSQL for metadata only
          - Comprehensive audit logging
          - Input validation with Zod schemas

          EOF

          if [ ! -z "$PREVIOUS_TAG" ]; then
            echo "## 📝 Changes Since $PREVIOUS_TAG" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s (%an)" ${PREVIOUS_TAG}..HEAD >> RELEASE_NOTES.md
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.version.outputs.version }}
          path: |
            release-artifacts/
            RELEASE_NOTES.md
          retention-days: 90

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-release]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.build-release.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Banking Ledger PoC v${{ needs.build-release.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }} # Mark as prerelease if version contains - (e.g., v1.0.0-beta)
          files: |
            release-artifacts/*.tgz
            release-artifacts/deployment-manifest.json
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: ${{ !contains(github.ref, '-') }} # Only deploy stable releases (no pre-release)
    environment: staging
    timeout-minutes: 15

    steps:
      - name: Staging deployment placeholder
        run: |
          echo "🏦 Banking Ledger PoC v${{ needs.build-release.outputs.version }} ready for staging deployment"
          echo "This job would typically:"
          echo "- Download release artifacts"
          echo "- Deploy to staging environment"
          echo "- Run smoke tests"
          echo "- Validate deployment"
          echo ""
          echo "For security reasons, actual deployment scripts are not included in this example"
          echo "Staging deployment should be implemented according to your organization's policies"

  # Post-release validation
  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    timeout-minutes: 10

    steps:
      - name: Validate release
        run: |
          echo "✅ Banking Ledger PoC v${{ needs.build-release.outputs.version }} released successfully"
          echo ""
          echo "🔍 Release validation checklist:"
          echo "- ✅ All tests passed"
          echo "- ✅ Security audit passed"
          echo "- ✅ Build artifacts created"
          echo "- ✅ GitHub release published"
          echo "- ✅ Deployment manifest available"
          echo ""
          echo "🚀 Release is ready for production deployment"
